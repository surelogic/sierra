<findingTypes>
	<category>
		<id>Javadoc Comments</id>
		<findingType>PackageHtml</findingType>
		<findingType>JavadocMethod</findingType>
		<findingType>JavadocStyle</findingType>
		<findingType>JavadocType</findingType>
		<findingType>JavadocVariable</findingType>
		<name>Javadoc Comments</name>
		<description></description>
	</category>
	<category>
		<id>Naming Conventions</id>
		<findingType>WriteTag</findingType>
		<findingType>AbstractClassName</findingType>
		<findingType>ConstantName</findingType>
		<findingType>LocalFinalVariableName</findingType>
		<findingType>LocalVariableName</findingType>
		<findingType>MemberName</findingType>
		<findingType>MethodName</findingType>
		<findingType>PackageName</findingType>
		<findingType>ParameterName</findingType>
		<findingType>StaticVariableName</findingType>
		<name>Naming Conventions</name>
		<description></description>
	</category>
	<category>
		<id>Headers</id>
		<findingType>TypeName</findingType>
		<findingType>Header</findingType>
		<findingType>RegexpHeader</findingType>
		<name>Headers</name>
		<description></description>
	</category>
	<category>
		<id>Imports</id>
		<findingType>CrossLanguageRegexpHeader</findingType>
		<findingType>AvoidStarImport</findingType>
		<findingType>IllegalImport</findingType>
		<findingType>RedundantImport</findingType>
		<findingType>UnusedImports2</findingType>
		<findingType>ImportOrder</findingType>
		<name>Imports</name>
		<description></description>
	</category>
	<category>
		<id>Size Violations</id>
		<findingType>ImportControl</findingType>
		<findingType>ExecutableStatementCount</findingType>
		<findingType>FileLength</findingType>
		<findingType>LineLength</findingType>
		<findingType>MethodLength</findingType>
		<findingType>AnonInnerLength</findingType>
		<name>Size Violations</name>
		<description></description>
	</category>
	<category>
		<id>Whitespace</id>
		<findingType>ParameterNumber</findingType>
		<findingType>EmptyForInitializerPad</findingType>
		<findingType>EmptyForIteratorPad</findingType>
		<findingType>MethodParamPad</findingType>
		<findingType>NoWhitespaceAfter</findingType>
		<findingType>NoWhitespaceBefore</findingType>
		<findingType>OperatorWrap</findingType>
		<findingType>ParenPad</findingType>
		<findingType>TypecastParenPad</findingType>
		<findingType>TabCharacter</findingType>
		<findingType>WhitespaceAfter</findingType>
		<name>Whitespace</name>
		<description></description>
	</category>
	<category>
		<id>Modifiers</id>
		<findingType>WhitespaceAround</findingType>
		<findingType>ModifierOrder</findingType>
		<name>Modifiers</name>
		<description></description>
	</category>
	<category>
		<id>Block Checks</id>
		<findingType>RedundantModifier</findingType>
		<findingType>EmptyBlock</findingType>
		<findingType>LeftCurly</findingType>
		<findingType>NeedBraces</findingType>
		<findingType>RightCurly</findingType>
		<name>Block Checks</name>
		<description></description>
	</category>
	<category>
		<id>Coding</id>
		<findingType>AvoidNestedBlocks</findingType>
		<findingType>ArrayTrailingComma</findingType>
		<findingType>AvoidInlineConditionals</findingType>
		<findingType>CovariantEquals</findingType>
		<findingType>DoubleCheckedLocking2</findingType>
		<findingType>EmptyStatement</findingType>
		<findingType>EqualsHashCode</findingType>
		<findingType>FinalLocalVariable</findingType>
		<findingType>HiddenField</findingType>
		<findingType>IllegalInstantiation</findingType>
		<findingType>IllegalToken</findingType>
		<findingType>IllegalTokenText</findingType>
		<findingType>InnerAssignment</findingType>
		<findingType>MagicNumber</findingType>
		<findingType>MissingSwitchDefault</findingType>
		<findingType>ModifiedControlVariable</findingType>
		<findingType>RedundantThrows</findingType>
		<findingType>SimplifyBooleanExpression</findingType>
		<findingType>SimplifyBooleanReturn</findingType>
		<findingType>StringLiteralEquality</findingType>
		<findingType>NestedIfDepth</findingType>
		<findingType>NestedTryDepth</findingType>
		<findingType>SuperClone</findingType>
		<findingType>SuperFinalize</findingType>
		<findingType>IllegalCatch</findingType>
		<findingType>IllegalThrows</findingType>
		<findingType>PackageDeclaration</findingType>
		<findingType>JUnitTestCase</findingType>
		<findingType>ReturnCount</findingType>
		<findingType>IllegalType</findingType>
		<findingType>DeclarationOrder</findingType>
		<findingType>ParameterAssignment</findingType>
		<findingType>ExplicitInitialization</findingType>
		<findingType>DefaultComesLast</findingType>
		<findingType>MissingCtor</findingType>
		<findingType>FallThrough</findingType>
		<findingType>MultipleStringLiterals</findingType>
		<findingType>MultipleVariableDeclarations</findingType>
		<findingType>RequireThis</findingType>
		<name>Coding</name>
		<description></description>
	</category>
	<category>
		<id>Class Design</id>
		<findingType>UnnecessaryParentheses2</findingType>
		<findingType>VisibilityModifier</findingType>
		<findingType>FinalClass</findingType>
		<findingType>InterfaceIsType</findingType>
		<findingType>HideUtilityClassConstructor</findingType>
		<findingType>DesignForExtension</findingType>
		<findingType>MutableException</findingType>
		<name>Class Design</name>
		<description></description>
	</category>
	<category>
		<id>Duplicate Code</id>
		<findingType>ThrowsCount</findingType>
		<name>Duplicate Code</name>
		<description></description>
	</category>
	<category>
		<id>Metrics</id>
		<findingType>StrictDuplicateCode</findingType>
		<findingType>BooleanExpressionComplexity</findingType>
		<findingType>ClassDataAbstractionCoupling</findingType>
		<findingType>ClassFanOutComplexity</findingType>
		<findingType>CyclomaticComplexity2</findingType>
		<findingType>NPathComplexity2</findingType>
		<name>Metrics</name>
		<description></description>
	</category>
	<category>
		<id>Miscellaneous</id>
		<findingType>JavaNCSS</findingType>
		<findingType>GenericIllegalRegexp</findingType>
		<findingType>NewlineAtEndOfFile</findingType>
		<findingType>TodoComment</findingType>
		<findingType>Translation</findingType>
		<findingType>UncommentedMain</findingType>
		<findingType>UpperEll</findingType>
		<findingType>ArrayTypeStyle</findingType>
		<findingType>FinalParameters</findingType>
		<findingType>DescendantToken</findingType>
		<findingType>Indentation</findingType>
		<findingType>TrailingComment</findingType>
		<findingType>RequiredRegexp</findingType>
		<name>Miscellaneous</name>
		<description></description>
	</category>
	<category>
		<id>J2EE Checks</id>
		<findingType>Regexp</findingType>
		<findingType>EntityBean</findingType>
		<findingType>FinalStatic</findingType>
		<findingType>LocalHomeInterface</findingType>
		<findingType>LocalInterface</findingType>
		<findingType>MessageBean</findingType>
		<findingType>RemoteHomeInterface</findingType>
		<findingType>RemoteInterface</findingType>
		<findingType>SessionBean</findingType>
		<findingType>ThisParameter</findingType>
		<findingType>ThisReturn</findingType>
		<name>J2EE Checks</name>
		<description></description>
	</category>
	<category>
		<id>Code Duplication</id>
		<findingType>DuplicatedCode</findingType>
		<name>Code Duplication</name>
		<description>
			This encompasses various degrees of code duplication, from copy-and-paste 
			to code only differing in variable names or constants
		</description>
	</category>
	<category>
		<id>Correctness</id>
    <findingType>DMI_VACUOUS_CALL_TO_EASYMOCK_METHOD</findingType>
    <findingType>HE_SIGNATURE_DECLARES_HASHING_OF_UNHASHABLE_CLASS</findingType>		
    <findingType>RpC_REPEATED_CONDITIONAL_TEST</findingType>
    <findingType>DMI_FUTILE_ATTEMPT_TO_CHANGE_MAXPOOL_SIZE_OF_SCHEDULED_THREAD_POOL_EXECUTOR</findingType>
    <findingType>DMI_SCHEDULED_THREAD_POOL_EXECUTOR_WITH_ZERO_CORE_THREADS</findingType>
    <findingType>NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE</findingType>
    <findingType>VA_FORMAT_STRING_BAD_CONVERSION</findingType>
    <findingType>VA_FORMAT_STRING_BAD_CONVERSION_FROM_ARRAY</findingType>
    <findingType>VA_FORMAT_STRING_NO_PREVIOUS_ARGUMENT</findingType>
    <findingType>VA_FORMAT_STRING_BAD_ARGUMENT</findingType>
    <findingType>VA_FORMAT_STRING_MISSING_ARGUMENT</findingType>
    <findingType>VA_FORMAT_STRING_ILLEGAL</findingType>
    <findingType>VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED</findingType>
    <findingType>BIT_ADD_OF_SIGNED_BYTE</findingType>
    <findingType>DMI_INVOKING_HASHCODE_ON_ARRAY</findingType>
    <findingType>DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION</findingType>
    <findingType>DMI_VACUOUS_SELF_COLLECTION_CALL</findingType>
    <findingType>DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES</findingType>
    <findingType>TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINK</findingType>
    <findingType>TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK</findingType>		
		<findingType>EQ_COMPARING_CLASS_NAMES</findingType>
		<findingType>EQ_UNUSUAL</findingType>
		<findingType>EQ_GETCLASS_AND_CLASS_CONSTANT</findingType>
		<findingType>EQ_ALWAYS_TRUE</findingType>
		<findingType>EQ_ALWAYS_FALSE</findingType>
		<findingType>SE_READ_RESOLVE_IS_STATIC</findingType>
		<findingType>SE_PRIVATE_READ_RESOLVE_NOT_INHERITED</findingType>		
		<findingType>DLS_DEAD_LOCAL_STORE_IN_RETURN</findingType>
		<findingType>NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE</findingType>
		<findingType>EqualsDoesntOverride</findingType>
		<findingType>EqualsDoesntOverrideInherited</findingType>
		<findingType>InvokingToStringOnArray</findingType>
		<findingType>FormatStringArgsMismatch</findingType>
		<findingType>AppendingToObjectOutputStream</findingType>
		<findingType>VR_UNRESOLVABLE_REFERENCE</findingType>
		<findingType>CaughtInfiniteLoop</findingType>
		<findingType>CaughtInfiniteRecursiveLoop</findingType>
		<findingType>ContainerAddedToItself</findingType>
		<findingType>GeneratedFromIncompleteDetectors</findingType>
		<findingType>UnknownBugPattern</findingType>
		<findingType>AvoidUsingFloatForMathOperations</findingType>
		<findingType>FieldIsntFinalInImmutableClass</findingType>
		<findingType>AnnotationIsNotVisibleToReflection</findingType>
		<findingType>UnboxedAndCoercedForTernaryOperator</findingType>
		<findingType>NP_ARGUMENT_MIGHT_BE_NULL</findingType>
		<findingType>RV_ABSOLUTE_VALUE_OF_RANDOM_INT</findingType>
		<findingType>RV_ABSOLUTE_VALUE_OF_HASHCODE</findingType>
		<findingType>RandomValue01ToInt</findingType>
		<findingType>EQ_OVERRIDING_EQUALS_NOT_SYMMETRIC</findingType>
		<findingType>EQ_DONT_DEFINE_EQUALS_FOR_ENUM</findingType>
		<findingType>HE_USE_OF_UNHASHABLE_CLASS</findingType>
		<findingType>NS_DANGEROUS_NON_SHORT_CIRCUIT</findingType>
		<findingType>UR_UNINIT_READ</findingType>
		<findingType>NM_VERY_CONFUSING</findingType>
		<findingType>NM_METHOD_CONSTRUCTOR_CONFUSION</findingType>
		<findingType>SuspiciousHashcodeMethodName</findingType>
		<findingType>NM_LCASE_TOSTRING</findingType>
		<findingType>SuspiciousEqualsMethodName</findingType>
		<findingType>
			SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH
		</findingType>
		<findingType>NP_UNWRITTEN_FIELD</findingType>
		<findingType>UWF_NULL_FIELD</findingType>
		<findingType>UWF_UNWRITTEN_FIELD</findingType>
		<findingType>RV_RETURN_VALUE_IGNORED</findingType>
		<findingType>RV_RETURN_VALUE_IGNORED2</findingType>
		<findingType>RV_DONT_JUST_NULL_CHECK_READLINE</findingType>
		<findingType>NP_ALWAYS_NULL</findingType>
		<findingType>NP_STORE_INTO_NONNULL_FIELD</findingType>
		<findingType>NP_ALWAYS_NULL_EXCEPTION</findingType>
		<findingType>NP_NULL_ON_SOME_PATH</findingType>
		<findingType>NP_NULL_ON_SOME_PATH_EXCEPTION</findingType>
		<findingType>NP_NULL_PARAM_DEREF</findingType>
		<findingType>NP_NULL_PARAM_DEREF_NONVIRTUAL</findingType>
		<findingType>
			NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS
		</findingType>
		<findingType>NP_NONNULL_PARAM_VIOLATION</findingType>
		<findingType>NP_NONNULL_RETURN_VIOLATION</findingType>
		<findingType>NP_GUARANTEED_DEREF</findingType>
		<findingType>NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH</findingType>
		<findingType>UCF_USELESS_CONTROL_FLOW_NEXT_LINE</findingType>
		<findingType>
			RedundantComparisonOfNullAndNonnullValue
		</findingType>
		<findingType>RC_REF_COMPARISON</findingType>
		<findingType>
			VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG
		</findingType>
		<findingType>EC_UNRELATED_TYPES</findingType>
		<findingType>EC_ARRAY_AND_NONARRAY</findingType>
		<findingType>EqualComparisonToNullArgument</findingType>
		<findingType>EC_UNRELATED_INTERFACES</findingType>
		<findingType>EC_UNRELATED_CLASS_AND_INTERFACE</findingType>
		<findingType>INT_BAD_COMPARISON_WITH_SIGNED_BYTE</findingType>
		<findingType>
			INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE
		</findingType>
		<findingType>INT_BAD_REM_BY_1</findingType>
		<findingType>BIT_IOR_OF_SIGNED_BYTE</findingType>
		<findingType>BIT_AND</findingType>
		<findingType>BIT_AND_ZZ</findingType>
		<findingType>BIT_IOR</findingType>
		<findingType>SA_FIELD_SELF_ASSIGNMENT</findingType>
		<findingType>SA_LOCAL_DOUBLE_ASSIGNMENT</findingType>
		<findingType>SA_FIELD_DOUBLE_ASSIGNMENT</findingType>
		<findingType>SA_FIELD_SELF_COMPUTATION</findingType>
		<findingType>SA_LOCAL_SELF_COMPUTATION</findingType>
		<findingType>SA_FIELD_SELF_COMPARISON</findingType>
		<findingType>SA_LOCAL_SELF_COMPARISON</findingType>
		<findingType>
			UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS
		</findingType>
		<findingType>
			IJU_ASSERT_METHOD_INVOKED_FROM_RUN_METHOD
		</findingType>
		<findingType>IJU_BAD_SUITE_METHOD</findingType>
		<findingType>IJU_SETUP_NO_SUPER</findingType>
		<findingType>IJU_TEARDOWN_NO_SUPER</findingType>
		<findingType>IJU_SUITE_NOT_STATIC</findingType>
		<findingType>IJU_NO_TESTS</findingType>
		<findingType>BOA_BADLY_OVERRIDDEN_ADAPTER</findingType>
		<findingType>BRSA_BAD_RESULTSET_ACCESS</findingType>
		<findingType>SQL_BAD_RESULTSET_ACCESS</findingType>
		<findingType>SQL_BAD_PREPARED_STATEMENT_ACCESS</findingType>
		<findingType>SIO_SUPERFLUOUS_INSTANCEOF</findingType>
		<findingType>BAC_BAD_APPLET_CONSTRUCTOR</findingType>
		<findingType>EC_BAD_ARRAY_COMPARE</findingType>
		<findingType>STI_INTERRUPTED_ON_CURRENTTHREAD</findingType>
		<findingType>STI_INTERRUPTED_ON_UNKNOWNTHREAD</findingType>
		<findingType>IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN</findingType>
		<findingType>MF_METHOD_MASKS_FIELD</findingType>
		<findingType>MF_CLASS_MASKS_FIELD</findingType>
		<findingType>FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER</findingType>
		<findingType>
			ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEIL
		</findingType>
		<findingType>
			ICAST_INT_CAST_TO_FLOAT_PASSED_TO_ROUND
		</findingType>
		<findingType>NP_NULL_INSTANCEOF</findingType>
		<findingType>BC_NULL_INSTANCEOF</findingType>
		<findingType>
			DMI_LONG_BITS_TO_DOUBLE_INVOKED_ON_INT
		</findingType>
		<findingType>BC_IMPOSSIBLE_CAST_PRIMITIVE_ARRAY</findingType>
		<findingType>BC_IMPOSSIBLE_CAST</findingType>
		<findingType>BC_IMPOSSIBLE_INSTANCEOF</findingType>
		<findingType>RE_POSSIBLE_UNINTENDED_PATTERN</findingType>
		<findingType>RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION</findingType>
		<findingType>
			RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION
		</findingType>
		<findingType>DLS_OVERWRITTEN_INCREMENT</findingType>
		<findingType>ICAST_BAD_SHIFT_AMOUNT</findingType>
		<findingType>IM_MULTIPLYING_RESULT_OF_IREM</findingType>
		<findingType>DMI_INVOKING_TOSTRING_ON_ARRAY</findingType>
		<findingType>DMI_BAD_MONTH</findingType>
		<findingType>DMI_CALLING_NEXT_FROM_HASNEXT</findingType>
		<findingType>QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT</findingType>
		<findingType>GC_UNRELATED_TYPES</findingType>
		<findingType>WrongPackage</findingType>
		<findingType>ExceptionNotThrown</findingType>
		<findingType>UnrelatedTypesUsingPointerEquality</findingType>
		<findingType>BitSignedCheckHighBit</findingType>
		<findingType>DeadStoreOfClassLiteral</findingType>
		<findingType>AlwaysValueUsedWhereNeverRequired</findingType>
		<findingType>NeverValueUsedWhereAlwaysRequired</findingType>
		<findingType>MaybeSourceValueReachesAlwaysSink</findingType>
		<findingType>MaybeSourceValueReachesNeverSink</findingType>
		<name>Correctness</name>
		<description>
			Probable bug - an apparent coding mistake resulting in code
			that was probably not what the developer intended. We strive
			for a low false positive rate.
		</description>
	</category>
	<category>
		<id>Bad practice</id>
    <findingType>GC_UNCHECKED_TYPE_IN_GENERIC_CALL</findingType>		
    <findingType>EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS</findingType>		
		<findingType>CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE</findingType>
		<findingType>
			SwingMethodsShouldBeInvokedInSwingThread
		</findingType>
		<findingType>FI_FINALIZER_ONLY_NULLS_FIELDS</findingType>
		<findingType>FI_FINALIZER_NULLS_FIELDS</findingType>
		<findingType>UnsafeInheritanceOfGetResource</findingType>
		<findingType>CreatesEmptyZipFileEntry</findingType>
		<findingType>CreatesEmptyJarFileEntry</findingType>
		<findingType>
			DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED
		</findingType>
		<findingType>DP_DO_INSIDE_DO_PRIVILEGED</findingType>
		<findingType>MethodRequiresSecurityPermissionCheck</findingType>
		<findingType>
			ClassloaderCreationRequiresSecurityPermissionCheck
		</findingType>
		<findingType>
			AvoidCatchingIllegalStateMonitorException
		</findingType>
		<findingType>CloneMethodMustImplementCloneable</findingType>
		<findingType>NoSuperCloneCall</findingType>
		<findingType>MethodMightDropException</findingType>
		<findingType>MethodMightIgnoreException</findingType>
		<findingType>AvoidCallingSystemExit</findingType>
		<findingType>UseOfFutureKeywordAsIdentifier</findingType>
		<findingType>UseOfFutureKeywordAsMemberIdentifier</findingType>
		<findingType>AvoidCallingSystemRunFinalizersOnExit</findingType>
		<findingType>NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT</findingType>
		<findingType>
			SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE
		</findingType>
		<findingType>
			SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING
		</findingType>
		<findingType>EmptyFinalizer</findingType>
		<findingType>FI_NULLIFY_SUPER</findingType>
		<findingType>FinalizeOnlyCallsSuperFinalize</findingType>
		<findingType>FinalizeDoesNotCallSuperFinalize</findingType>
		<findingType>AvoidCallingFinalizeExplicitly</findingType>
		<findingType>EQ_SELF_USE_OBJECT</findingType>
		<findingType>EQ_SELF_NO_OBJECT</findingType>
		<findingType>NP_DOES_NOT_HANDLE_NULL</findingType>
		<findingType>CO_SELF_NO_OBJECT</findingType>
		<findingType>ES_COMPARING_STRINGS_WITH_EQ</findingType>
		<findingType>ES_COMPARING_PARAMETER_STRING_WITH_EQ</findingType>
		<findingType>EQ_COMPARETO_USE_OBJECT_EQUALS</findingType>
		<findingType>DefinesHashCodeUsesEquals</findingType>
		<findingType>DefinesHashcodeNotEquals</findingType>
		<findingType>DefinesEqualsUsesHashcode</findingType>
		<findingType>InheritsEqualsUsesHashCode</findingType>
		<findingType>OverridesEqualsNotHashcode</findingType>
		<findingType>EQ_ABSTRACT_SELF</findingType>
		<findingType>CO_ABSTRACT_SELF</findingType>
		<findingType>NS_NON_SHORT_CIRCUIT</findingType>
		<findingType>
			IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATION
		</findingType>
		<findingType>SI_INSTANCE_BEFORE_FINALS_ASSIGNED</findingType>
		<findingType>IT_NO_SUCH_ELEMENT</findingType>
		<findingType>MethodNamingConventions</findingType>
		<findingType>FieldNamingConventions</findingType>
		<findingType>ClassNamingConventions</findingType>
		<findingType>NM_VERY_CONFUSING_INTENTIONAL</findingType>
		<findingType>NM_CONFUSING</findingType>
		<findingType>NM_CLASS_NOT_EXCEPTION</findingType>
		<findingType>RR_NOT_CHECKED</findingType>
		<findingType>SR_NOT_CHECKED</findingType>
		<findingType>SE_NO_SUITABLE_CONSTRUCTOR</findingType>
		<findingType>
			SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION
		</findingType>
		<findingType>SE_COMPARATOR_SHOULD_BE_SERIALIZABLE</findingType>
		<findingType>SE_NO_SERIALVERSIONID</findingType>
		<findingType>SE_READ_RESOLVE_MUST_RETURN_OBJECT</findingType>
		<findingType>SE_TRANSIENT_FIELD_NOT_RESTORED</findingType>
		<findingType>SE_NONFINAL_SERIALVERSIONID</findingType>
		<findingType>SE_NONSTATIC_SERIALVERSIONID</findingType>
		<findingType>SE_NONLONG_SERIALVERSIONID</findingType>
		<findingType>SE_METHOD_MUST_BE_PRIVATE</findingType>
		<findingType>SE_BAD_FIELD</findingType>
		<findingType>SE_INNER_CLASS</findingType>
		<findingType>SE_BAD_FIELD_INNER_CLASS</findingType>
		<findingType>SE_BAD_FIELD_STORE</findingType>
		<findingType>NP_TOSTRING_COULD_RETURN_NULL</findingType>
		<findingType>NP_CLONE_COULD_RETURN_NULL</findingType>
		<findingType>OS_OPEN_STREAM</findingType>
		<findingType>OS_OPEN_STREAM_EXCEPTION_PATH</findingType>
		<findingType>ODR_OPEN_DATABASE_RESOURCE</findingType>
		<findingType>
			ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH
		</findingType>
		<findingType>ISC_INSTANTIATE_STATIC_CLASS</findingType>
		<findingType>DMI_RANDOM_USED_ONLY_ONCE</findingType>
		<findingType>
			BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS
		</findingType>
		<findingType>
			J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSION
		</findingType>
		<findingType>SameSimpleNameAsInterface</findingType>
		<findingType>SameSimpleNameAsSuperclass</findingType>
		<findingType>WrongPackageIntentional</findingType>
		<findingType>ReturnValueIgnoredBadPractice</findingType>
		<findingType>BitSignedCheck</findingType>
		<findingType>BooleanMethodReturnsNull</findingType>
		<name>Bad practice</name>
		<description>
			Violations of recommended and essential coding practice.
			Examples include hash code and equals problems, cloneable
			idiom, dropped exceptions, Serializable problems, and misuse
			of finalize. We strive to make this analysis accurate,
			although some groups may not care about some of the bad
			practices.
		</description>
	</category>
	<category>
		<id>Dodgy</id>
		<findingType>ThreadPassedWhereRunnableExpected</findingType>
		<findingType>NP_IMMEDIATE_DEREFERENCE_OF_READLINE</findingType>
		<findingType>RV_REM_OF_RANDOM_INT</findingType>
		<findingType>RV_REM_OF_HASHCODE</findingType>
		<findingType>IC_INIT_CIRCULARITY</findingType>
		<findingType>
			IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD
		</findingType>
		<findingType>
			SE_TRANSIENT_FIELD_OF_NONSERIALIZABLE_CLASS
		</findingType>
		<findingType>SF_SWITCH_FALLTHROUGH</findingType>
		<findingType>QF_QUESTIONABLE_FOR_LOOP</findingType>
		<findingType>
			NP_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR
		</findingType>
		<findingType>
			UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR
		</findingType>
		<findingType>RV_CHECK_FOR_POSITIVE_INDEXOF</findingType>
		<findingType>
			NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE
		</findingType>
		<findingType>NP_LOAD_OF_KNOWN_NULL_VALUE</findingType>
		<findingType>PZLA_PREFER_ZERO_LENGTH_ARRAYS</findingType>
		<findingType>UCF_USELESS_CONTROL_FLOW</findingType>
		<findingType>
			RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE
		</findingType>
		<findingType>RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE</findingType>
		<findingType>
			RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE
		</findingType>
		<findingType>
			RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUES
		</findingType>
		<findingType>SA_LOCAL_SELF_ASSIGNMENT</findingType>
		<findingType>INT_VACUOUS_COMPARISON</findingType>
		<findingType>UOE_USE_OBJECT_EQUALS</findingType>
		<findingType>DLS_DEAD_LOCAL_STORE</findingType>
		<findingType>DLS_DEAD_LOCAL_STORE_OF_NULL</findingType>
		<findingType>REC_CATCH_EXCEPTION</findingType>
		<findingType>FE_FLOATING_POINT_EQUALITY</findingType>
		<findingType>CD_CIRCULAR_DEPENDENCY</findingType>
		<findingType>RI_REDUNDANT_INTERFACES</findingType>
		<findingType>MTIA_SUSPECT_STRUTS_INSTANCE_FIELD</findingType>
		<findingType>MTIA_SUSPECT_SERVLET_INSTANCE_FIELD</findingType>
		<findingType>PS_PUBLIC_SEMAPHORES</findingType>
		<findingType>ICAST_INTEGER_MULTIPLY_CAST_TO_LONG</findingType>
		<findingType>ICAST_IDIV_CAST_TO_DOUBLE</findingType>
		<findingType>BC_BAD_CAST_TO_CONCRETE_COLLECTION</findingType>
		<findingType>BC_UNCONFIRMED_CAST</findingType>
		<findingType>BC_VACUOUS_INSTANCEOF</findingType>
		<findingType>BC_BAD_CAST_TO_ABSTRACT_COLLECTION</findingType>
		<findingType>IM_BAD_CHECK_FOR_ODD</findingType>
		<findingType>IM_AVERAGE_COMPUTATION_COULD_OVERFLOW</findingType>
		<findingType>
			ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT
		</findingType>
		<findingType>DMI_HARDCODED_ABSOLUTE_FILENAME</findingType>
		<findingType>DMI_USELESS_SUBSTRING</findingType>
		<findingType>
			ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD
		</findingType>
		<findingType>DMI_NONSERIALIZABLE_OBJECT_WRITTEN</findingType>
		<findingType>DB_DUPLICATE_BRANCHES</findingType>
		<findingType>DB_DUPLICATE_SWITCH_CLAUSES</findingType>
		<findingType>XFB_XML_FACTORY_BYPASS</findingType>
		<findingType>USM_USELESS_SUBCLASS_METHOD</findingType>
		<findingType>USM_USELESS_ABSTRACT_METHOD</findingType>
		<findingType>CI_CONFUSED_INHERITANCE</findingType>
		<findingType>DoesntOverrideEquals</findingType>
		<name>Dodgy</name>
		<description>
			code that is confusing, anomalous, or written in a way that
			leads itself to errors. Examples include dead local stores,
			switch fall through, unconfirmed casts, and redundant null
			check of value known to be null. More false positives
			accepted. In previous versions of FindBugs, this category
			was known as Style.
		</description>
	</category>
	<category>
		<id>Performance</id>
		<findingType>HSC_HUGE_SHARED_STRING_CONSTANT</findingType>
		<findingType>BlockingMethodsOnURL</findingType>
		<findingType>AvoidCollectionOfURLS</findingType>
		<findingType>InefficientStringConstructor</findingType>
		<findingType>InefficientStringVoidConstructor</findingType>
		<findingType>AvoidCallingtoStringOnString</findingType>
		<findingType>AvoidExplicitGarbageCollection</findingType>
		<findingType>InefficientBooleanConstructor</findingType>
		<findingType>InefficientNumberConstructor</findingType>
		<findingType>
			InefficientFloatingPointNumberConstructor
		</findingType>
		<findingType>UseStringLength</findingType>
		<findingType>BoxedPrimitiveToString</findingType>
		<findingType>BoxingImmediatelyUnboxed</findingType>
		<findingType>
			BoxingImmediatelyUnboxedToPerformCoercion
		</findingType>
		<findingType>
			AvoidAllocatingObjectForObtainingClassObject
		</findingType>
		<findingType>UseNextIntNotNextDoubleOfRandom</findingType>
		<findingType>SS_SHOULD_BE_STATIC</findingType>
		<findingType>UnusedField</findingType>
		<findingType>URF_UNREAD_FIELD</findingType>
		<findingType>SIC_INNER_SHOULD_BE_STATIC</findingType>
		<findingType>SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS</findingType>
		<findingType>SIC_INNER_SHOULD_BE_STATIC_ANON</findingType>
		<findingType>UPM_UNCALLED_PRIVATE_METHOD</findingType>
		<findingType>UseStringBufferForStringAppends</findingType>
		<findingType>ITA_INEFFICIENT_TO_ARRAY</findingType>
		<findingType>WMI_WRONG_MAP_ITERATOR</findingType>
		<findingType>UM_UNNECESSARY_MATH</findingType>
		<findingType>IMA_INEFFICIENT_MEMBER_ACCESS</findingType>
		<name>Performance</name>
		<description>
			code that is not necessarily incorrect but may be
			inefficient
		</description>
	</category>
	<category>
		<id>Malicious code vulnerability</id>
		<findingType>FinalizeShouldBeProtected</findingType>
		<findingType>
			PublicStaticMayExposeInternalRepresentation
		</findingType>
		<findingType>MayExposeInternalRepresentation</findingType>
		<findingType>MayExposeInternalRepresentation2</findingType>
		<findingType>MayExposeInternalStaticStatic</findingType>
		<findingType>
			FieldShouldBeOutOfInterfaceAndPackageProtected
		</findingType>
		<findingType>FieldShouldBeFinalAndPackageProtected</findingType>
		<findingType>FieldShouldBeFinal</findingType>
		<findingType>PackageProtectField</findingType>
		<findingType>MutableHashtable</findingType>
		<findingType>MutableArray</findingType>
		<findingType>CannotBeFinal</findingType>
		<findingType>HttpParameterWrittenToServlet</findingType>
		<findingType>HttpParameterWrittenToJSP</findingType>
		<findingType>HRS_REQUEST_PARAMETER_TO_HTTP_HEADER</findingType>
		<findingType>HRS_REQUEST_PARAMETER_TO_COOKIE</findingType>
		<findingType>DMI_CONSTANT_DB_PASSWORD</findingType>
		<findingType>DMI_EMPTY_DB_PASSWORD</findingType>
		<findingType>XSS_REQUEST_PARAMETER_TO_SEND_ERROR</findingType>
		<name>Malicious code vulnerability</name>
		<description>
			Code that is vulnerable to attacks from untrusted code
		</description>
	</category>
	<category>
		<id>Multithreaded correctness</id>
		<findingType>MSF_MUTABLE_SERVLET_FIELD</findingType>
		<findingType>AvoidStaticCalendar</findingType>
		<findingType>AvoidStaticDateformat</findingType>
		<findingType>CallToStaticCalendar</findingType>
		<findingType>CallToStaticDateFormat</findingType>
		<findingType>SynchronizeAndNullCheckOnSameField</findingType>
		<findingType>VolatileReferenceToArray</findingType>
		<findingType>MonitorWaitOnCondition</findingType>
		<findingType>UselessThread</findingType>
		<findingType>PossibleDoubleCheckOfField</findingType>
		<findingType>SynchronizationOnSharedConstant</findingType>
		<findingType>EmptySynchronizationBlock</findingType>
		<findingType>InconsistentSynchronization2</findingType>
		<findingType>NakedNotifyCall</findingType>
		<findingType>InvokesRun</findingType>
		<findingType>MethodSpinsOnField</findingType>
		<findingType>WaitWithTwoLocks</findingType>
		<findingType>TwoLocksOnNotify</findingType>
		<findingType>UnconditionalWait</findingType>
		<findingType>SynchronizedSetUnsynchronizedGet</findingType>
		<findingType>InconsistentSynchronization</findingType>
		<findingType>FieldNotGuarded</findingType>
		<findingType>AvoidSynchronizationOnUpdatedField</findingType>
		<findingType>IncorrectSynchronizationOfWriteObject</findingType>
		<findingType>AvoidSynchronizationOfReadObject</findingType>
		<findingType>AvoidThreadStartInConstructor</findingType>
		<findingType>WaitNotInLoop</findingType>
		<findingType>AwaitNotInLoop</findingType>
		<findingType>UseNotifyAllInsteadOfNotify</findingType>
		<findingType>UnreleasedLock</findingType>
		<findingType>UnreleasedLockOnExceptionPath</findingType>
		<findingType>MismatchedWait</findingType>
		<findingType>MismatchedNotify</findingType>
		<findingType>IncorrectLazyInitializationOfInstance</findingType>
		<findingType>IncorrectLazyInitializationOfStatic</findingType>
		<findingType>AvoidCallingSynchronizedOnLock</findingType>
		<findingType>AvoidCallingSleepWithLockHeld</findingType>
		<findingType>LazyInitUpdateStatic</findingType>
		<findingType>DL_SYNCHRONIZATION_ON_BOOLEAN</findingType>
		<findingType>DL_SYNCHRONIZATION_ON_BOXED_PRIMITIVE</findingType>
		<findingType>DL_SYNCHRONIZATION_ON_UNSHARED_BOXED_PRIMITIVE</findingType>
		<findingType>WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL</findingType>
		<findingType>ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD</findingType>
		<name>Multithreaded correctness</name>
		<description>
			code flaws having to do with threads, locks, and volatiles
		</description>
	</category>
	<category>
		<id>Internationalization</id>
		<findingType>UseLocaleParameterizedVersion</findingType>
		<name>Internationalization</name>
		<description>
			code flaws having to do with internationalization and locale
		</description>
	</category>
	<category>
		<id>Miscellaneous</id>
		<findingType>SKIPPED_CLASS_TOO_BIG</findingType>
    <findingType>OBL_UNSATISFIED_OBLIGATION</findingType>		
    <findingType>DMI_UNSUPPORTED_METHOD</findingType>
    <findingType>NP_DEREFERENCE_OF_READLINE_VALUE</findingType>
    <findingType>VA_FORMAT_STRING_BAD_CONVERSION_TO_BOOLEAN</findingType>    
		<name>Miscellaneous</name>
		<description>
			Other issues that don't fall into an obvious category
		</description>
	</category>
  <category>
    <id>JSure</id>
    <findingType>JSure</findingType>
    <findingType>BorrowedPromiseDrop</findingType>
    <findingType>UniquePromiseDrop</findingType>
    <findingType>AggregatePromiseDrop</findingType>
    <findingType>StartsPromiseDrop</findingType>
    <findingType>RegionEffectsPromiseDrop</findingType>
    <findingType>InRegionPromiseDrop</findingType>
    <findingType>RegionModel</findingType>
    <findingType>LockModel</findingType>
    <findingType>RequiresLockPromiseDrop</findingType>
    <findingType>SelfProtectedPromiseDrop</findingType>
    <findingType>SingleThreadedPromiseDrop</findingType>
    <findingType>TransparentPromiseDrop</findingType>
    <findingType>PromisePromiseDrop</findingType>
    <findingType>LockAnalysis_ds_PreconditionsAssured</findingType>
    <findingType>LockAnalysis_ds_PreconditionsNotAssured</findingType>
    <findingType>ThreadEffectsAnalysis_threadEffectDrop</findingType>
    <findingType>ThreadEffectsAnalysis_callPromiseDrop</findingType>
    <findingType>LockAnalysis_ds_IndirectFieldAccessNotAssured</findingType>
    <findingType>LockAnalysis_ds_SynchronizedMethodWarningDetails</findingType>
    <findingType>LockAnalysis_ds_ReturnAssured</findingType>
    <findingType>LockAnalysis_ds_SynchronizedConstructorAssured</findingType>
    <findingType>ColorSecondPass_inheritedColor</findingType>
    <findingType>ColorSecondPass_inferredColor</findingType>
    <findingType>LockAnalysis_ds_FieldAccessNotAssured</findingType>
    <findingType>LockAnalysis_ds_DeclaredJUCLockField</findingType>
    <findingType>ThreadEffectsAnalysis_callNotPromiseDrop</findingType>
    <findingType>LockAnalysis_ds_SyncedJUCLock</findingType>
    <findingType>LockAnalysis_ds_PreconditionsAssuredAlternative</findingType>
    <findingType>LockAnalysis_ds_RedundantSynchronized</findingType>
    <findingType>LockAnalysis_ds_FieldAccessAssured</findingType>
    <findingType>LockAnalysis_ds_FieldAccessNotResolvable</findingType>
    <findingType>LockAnalysis_ds_MasqueradingCall2</findingType>
    <findingType>ColorSecondPass_colorContextDrop</findingType>
    <findingType>ThreadEffectsAnalysis_noThreadsDrop</findingType>
    <findingType>LockAnalysis_ds_JUCLockFields</findingType>
    <findingType>LockAnalysis_ds_PreconditionNotResolvable</findingType>
    <findingType>LockAnalysis_ds_SynchronizedConstructorNotAssured</findingType>
    <findingType>LockAnalysis_ds_FieldAccessAssuredAlternative</findingType>
    <findingType>ColorSecondPass_inheritedTransparent</findingType>
    <findingType>LockAnalysis_ds_AggregationNeeded</findingType>
    <findingType>LockAnalysis_ds_UnidentifiableLock</findingType>
    <findingType>LockAnalysis_ds_NonfinalExpression</findingType>
    <findingType>LockAnalysis_ds_IndirectFieldAccessAssuredAlternative</findingType>
    <findingType>LockAnalysis_ds_ReturnNotAssured</findingType>
    <findingType>LockAnalysis_ds_MasqueradingCall</findingType>
    <findingType>LockAnalysis_ds_SynchronizedStaticMethodWarningDetails</findingType>
    <findingType>LockAnalysis_ds_SynchronizationUnused</findingType>
    <findingType>LockAnalysis_ds_IndirectFieldAccessAssured</findingType>
    <findingType>LockAnalysis_ds_AggregationNeeded2</findingType>
    <findingType>UniquenessAssurance_uniquenessContraints1</findingType>
    <findingType>UniquenessAssurance_uniquenessContraints2</findingType>
    <findingType>UniquenessAssurance_uniqueReturnDrop</findingType>
    <findingType>UniquenessAssurance_borrowedParametersDrop</findingType>
    <findingType>UniquenessAssurance_uniqueParametersDrop</findingType>
    <findingType>UniquenessAssurance_effectOfCallDrop</findingType>
    <findingType>UniquenessAssurance_dependencyDrop</findingType>
    <findingType>UniquenessAssurance_error</findingType>
    <findingType>UniquenessAssurance</findingType>
    <findingType>LockAnalysis_ds_OnBehalfOfConstructor</findingType>
    <findingType>LockAnalysis_ds_FieldDeclaration</findingType>
    <findingType>LockAnalysis_ds_HeldLock</findingType>
    <findingType>LockAnalysis_ds_HeldJUCLock</findingType>
    <findingType>LockAnalysis_ds_PoisonedLockCall</findingType>
    <findingType>LockAnalysis_ds_NoMatchingUnlocks</findingType>
    <findingType>LockAnalysis_ds_MatchingUnlock</findingType>
    <findingType>LockAnalysis_ds_PoisonedUnlockCall</findingType>
    <findingType>LockAnalysis_ds_NoMatchingLocks</findingType>
    <findingType>LockAnalysis_ds_MatchingLock</findingType>
    <findingType>LockAnalysis_ds_AggregationEvidence</findingType>
    <findingType>EffectAssurance_msgUnaccountedFor</findingType>
    <findingType>EffectAssurance_msgCheckedBy</findingType>
    <findingType>EffectAssurance_msgEmptyEffects</findingType>
    <findingType>EffectAssurance_msgContructorRule</findingType>

    <name>JSure Issue</name>
    <description>
      This encompasses various issues related to JSure
    </description>
  </category>
	<category>
		<id>Basic Rules</id>
		<findingType>AvoidMultipleUnaryOperators</findingType>
		<findingType>EmptyInitializer</findingType>
		<findingType>EmptyCatchBlock</findingType>
		<findingType>EmptyIfStmt</findingType>
		<findingType>EmptyWhileStmt</findingType>
		<findingType>EmptyTryBlock</findingType>
		<findingType>EmptyFinallyBlock</findingType>
		<findingType>EmptySwitchStatements</findingType>
		<findingType>JumbledIncrementer</findingType>
		<findingType>ForLoopShouldBeWhileLoop</findingType>
		<findingType>UnnecessaryConversionTemporary</findingType>
		<findingType>OverrideBothEqualsAndHashcode</findingType>
		<findingType>DoubleCheckedLocking</findingType>
		<findingType>ReturnFromFinallyBlock</findingType>
		<!-- DUP <findingType>EmptySynchronizedBlock</findingType> -->
		<findingType>UnnecessaryReturn</findingType>
		<findingType>EmptyStaticInitializer</findingType>
		<findingType>UnconditionalIfStatement</findingType>
		<findingType>EmptyStatementNotInLoop</findingType>
		<findingType>BooleanInstantiation</findingType>
		<findingType>UnnecessaryFinalModifier</findingType>
		<findingType>CollapsibleIfStatements</findingType>
		<findingType>UselessOverridingMethod</findingType>
		<findingType>ClassCastExceptionWithToArray</findingType>
		<findingType>
			AvoidDecimalLiteralsInBigDecimalConstructor
		</findingType>
		<findingType>UselessOperationOnImmutable</findingType>
		<!--  DUP <findingType>MisplacedNullCheck</findingType> -->
		<findingType>UnusedNullCheckInEquals</findingType>
		<findingType>AvoidThreadGroup</findingType>
		<findingType>BrokenNullCheck</findingType>
		<findingType>BigIntegerInstantiation</findingType>
		<findingType>AvoidUsingOctalValues</findingType>
		<findingType>AvoidUsingHardCodedIP</findingType>
		<findingType>CheckResultSet</findingType>
		<name>Basic Rules</name>
		<description>
			The Basic Ruleset contains a collection of good practices
			which everyone should follow.
		</description>
	</category>
	<category>
		<id>Braces Rules</id>
		<findingType>IfStmtsMustUseBraces</findingType>
		<findingType>WhileLoopsMustUseBraces</findingType>
		<findingType>IfElseStmtsMustUseBraces</findingType>
		<findingType>ForLoopsMustUseBraces</findingType>
		<name>Braces Rules</name>
		<description>
			The Braces Ruleset contains a collection of braces rules.
		</description>
	</category>
	<category>
		<id>Clone Implementation Rules</id>
		<!-- DUP <findingType>ProperCloneImplementation<
		/findingType> -->
		<findingType>CloneThrowsCloneNotSupportedException</findingType>
		<!-- DUP <findingType>CloneMethodMustImplementCloneable</findingType>-->
		<name>Clone Implementation Rules</name>
		<description>
			The Clone Implementation ruleset contains a collection of
			rules that find questionable usages of the clone() method.
		</description>
	</category>
	<category>
		<id>Code Size Rules</id>
		<findingType>NPathComplexity</findingType>
		<findingType>ExcessiveMethodLength</findingType>
		<findingType>ExcessiveParameterList</findingType>
		<findingType>ExcessiveClassLength</findingType>
		<findingType>CyclomaticComplexity</findingType>
		<findingType>ExcessivePublicCount</findingType>
		<findingType>TooManyFields</findingType>
		<findingType>NcssMethodCount</findingType>
		<findingType>NcssTypeCount</findingType>
		<findingType>NcssConstructorCount</findingType>
		<findingType>TooManyMethods</findingType>
		<name>Code Size Rules</name>
		<description>
			The Code Size Ruleset contains a collection of rules that
			find code size related problems.
		</description>
	</category>
	<category>
		<id>Controversial Rules</id>
		<findingType>UnnecessaryConstructor</findingType>
		<findingType>NullAssignment</findingType>
		<findingType>OnlyOneReturn</findingType>
		<findingType>UnusedModifier</findingType>
		<findingType>AssignmentInOperand</findingType>
		<findingType>AtLeastOneConstructor</findingType>
		<findingType>DontImportSun</findingType>
		<findingType>SuspiciousOctalEscape</findingType>
		<findingType>CallSuperInConstructor</findingType>
		<findingType>UnnecessaryParentheses</findingType>
		<findingType>SingularField</findingType>
		<findingType>DefaultPackage</findingType>
		<findingType>BooleanInversion</findingType>
		<findingType>DataflowAnomalyAnalysis</findingType>
		<findingType>AvoidAccessibilityAlteration</findingType>
		<findingType>AvoidFinalLocalVariable</findingType>
		<findingType>AvoidUsingNativeCode</findingType>
		<findingType>AvoidUsingShortType</findingType>
		<findingType>AvoidUsingVolatile</findingType>
		<name>Controversial Rules</name>
		<description>
			The Controversial Ruleset contains rules that, for whatever
			reason, are considered controversial. They are separated out
			here to allow people to include as they see fit via custom
			rulesets. This ruleset was initially created in response to
			discussions over UnnecessaryConstructorRule which Tom likes
			but most people really dislike :-)
		</description>
	</category>
	<category>
		<id>Coupling Rules</id>
		<findingType>CouplingBetweenObjects</findingType>
		<findingType>ExcessiveImports</findingType>
		<findingType>LooseCoupling</findingType>
		<name>Coupling Rules</name>
		<description>
			These are rules which find instances of high or
			inappropriate coupling between objects and packages.
		</description>
	</category>
	<category>
		<id>Design Rules</id>
		<findingType>UseSingleton</findingType>
		<findingType>SimplifyBooleanReturns</findingType>
		<findingType>SimplifyBooleanExpressions</findingType>
		<findingType>SwitchStmtsShouldHaveDefault</findingType>
		<findingType>AvoidDeeplyNestedIfStmts</findingType>
		<findingType>AvoidReassigningParameters</findingType>
		<findingType>SwitchDensity</findingType>
		<findingType>ConstructorCallsOverridableMethod</findingType>
		<findingType>AccessorClassGeneration</findingType>
		<findingType>FinalFieldCouldBeStatic</findingType>
		<findingType>CloseResource</findingType>
		<findingType>NonStaticInitializer</findingType>
		<findingType>DefaultLabelNotLastInSwitchStmt</findingType>
		<findingType>NonCaseLabelInSwitchStatement</findingType>
		<findingType>OptimizableToArrayCall</findingType>
		<findingType>BadComparison</findingType>
		<!--  DUP <findingType>EqualsNull</findingType> -->
		<findingType>ConfusingTernary</findingType>
		<findingType>InstantiationToGetClass</findingType>
		<findingType>IdempotentOperations</findingType>
		<findingType>SimpleDateFormatNeedsLocale</findingType>
		<findingType>ImmutableField</findingType>
		<findingType>UseLocaleWithCaseConversions</findingType>
		<findingType>AvoidProtectedFieldInFinalClass</findingType>
		<findingType>AssignmentToNonFinalStatic</findingType>
		<findingType>
			MissingStaticMethodInNonInstantiatableClass
		</findingType>
		<findingType>AvoidSynchronizedAtMethodLevel</findingType>
		<findingType>MissingBreakInSwitch</findingType>
		<!-- DUP <findingType>UseNotifyAllInsteadOfNotify</findingType> -->
		<findingType>AvoidInstanceofChecksInCatchClause</findingType>
		<findingType>AbstractClassWithoutAbstractMethod</findingType>
		<findingType>SimplifyConditional</findingType>
		<findingType>CompareObjectsWithEquals</findingType>
		<findingType>PositionLiteralsFirstInComparisons</findingType>
		<findingType>UnnecessaryLocalBeforeReturn</findingType>
		<findingType>NonThreadSafeSingleton</findingType>
		<findingType>UncommentedEmptyMethod</findingType>
		<findingType>UncommentedEmptyConstructor</findingType>
		<findingType>AvoidConstantsInterface</findingType>
		<findingType>UnsynchronizedStaticDateFormatter</findingType>
		<findingType>PreserveStackTrace</findingType>
		<findingType>UseCollectionIsEmpty</findingType>
		<findingType>ClassWithOnlyPrivateConstructorsShouldBeFinal</findingType>
		<findingType>EmptyMethodInAbstractClassShouldBeAbstract</findingType>
		<findingType>AbstractClassWithoutAnyMethod</findingType>
		<findingType>TooFewBranchesForASwitchStatement</findingType>
		<name>Design Rules</name>
		<description>
			The Design Ruleset contains a collection of rules that find
			questionable designs.
		</description>
	</category>
	<category>
		<id>Finalizer Rules</id>
		<!-- DUP <findingType>EmptyFinalizer</findingType> -->
		<!-- DUP <findingType>FinalizeOnlyCallsSuperFinalize</findingType> -->
		<findingType>FinalizeOverloaded</findingType>
		<!-- DUP <findingType>FinalizeDoesNotCallSuperFinalize</findingType> -->
		<!-- DUP <findingType>FinalizeShouldBeProtected</findingType> -->
		<!-- DUP <findingType>AvoidCallingFinalize</findingType> -->
		<name>Finalizer Rules</name>
		<description>
			These rules deal with different problems that can occur with
			finalizers.
		</description>
	</category>
	<category>
		<id>Import Statement Rules</id>
		<findingType>DuplicateImports</findingType>
		<findingType>DontImportJavaLang</findingType>
		<findingType>UnusedImports</findingType>
		<findingType>ImportFromSamePackage</findingType>
		<findingType>TooManyStaticImports</findingType>
		<name>Import Statement Rules</name>
		<description>
			These rules deal with different problems that can occur with
			a class' import statements.
		</description>
	</category>
	<category>
		<id>J2EE Rules</id>
		<findingType>UseProperClassLoader</findingType>
		<findingType>MDBAndSessionBeanNamingConvention</findingType>
		<findingType>
			RemoteSessionInterfaceNamingConvention
		</findingType>
		<findingType>LocalInterfaceSessionNamingConvention</findingType>
		<findingType>LocalHomeNamingConvention</findingType>
		<findingType>RemoteInterfaceNamingConvention</findingType>
		<findingType>DoNotCallSystemExit</findingType>
		<findingType>DoNotUseThreads</findingType>
		<findingType>StaticEJBFieldShouldBeFinal</findingType>
		<name>J2EE Rules</name>
		<description>These are rules for J2EE</description>
	</category>
	<category>
		<id>JavaBean Rules</id>
		<findingType>BeanMembersShouldSerialize</findingType>
		<findingType>MissingSerialVersionUID</findingType>
		<name>JavaBean Rules</name>
		<description>
			The JavaBeans Ruleset catches instances of bean rules not
			being followed.
		</description>
	</category>
	<category>
		<id>JUnit Rules</id>
		<findingType>JUnitStaticSuite</findingType>
		<findingType>JUnitSpelling</findingType>
		<findingType>JUnitAssertionsShouldIncludeMessage</findingType>
		<findingType>JUnitTestsShouldIncludeAssert</findingType>
		<findingType>TestClassWithoutTestCases</findingType>
		<findingType>UnnecessaryBooleanAssertion</findingType>
		<findingType>UseAssertEqualsInsteadOfAssertTrue</findingType>
		<findingType>UseAssertSameInsteadOfAssertTrue</findingType>
		<findingType>UseAssertNullInsteadOfAssertTrue</findingType>
		<findingType>SimplifyBooleanAssertion</findingType>
		<name>JUnit Rules</name>
		<description>
			These rules deal with different problems that can occur with
			JUnit tests.
		</description>
	</category>
	<category>
		<id>Jakarta Commons Logging Rules</id>
		<findingType>UseCorrectExceptionLogging</findingType>
		<findingType>ProperLogger</findingType>
		<name>Jakarta Commons Logging Rules</name>
		<description>
			The Jakarta Commons Logging ruleset contains a collection of
			rules that find questionable usages of that framework.
		</description>
	</category>
	<category>
		<id>Java Logging Rules</id>
		<findingType>MoreThanOneLogger</findingType>
		<findingType>LoggerIsNotStaticFinal</findingType>
		<findingType>SystemPrintln</findingType>
		<findingType>AvoidPrintStackTrace</findingType>
		<name>Java Logging Rules</name>
		<description>
			The Java Logging ruleset contains a collection of rules that
			find questionable usages of the logger.
		</description>
	</category>
	<category>
		<id>Migration Rules</id>
		<findingType>ReplaceVectorWithList</findingType>
		<findingType>ReplaceHashtableWithMap</findingType>
		<findingType>ReplaceEnumerationWithIterator</findingType>
		<findingType>AvoidEnumAsIdentifier</findingType>
		<findingType>AvoidAssertAsIdentifier</findingType>
		<!-- DUP <findingType>IntegerInstantiation</findingType> -->
		<findingType>ByteInstantiation</findingType>
		<findingType>ShortInstantiation</findingType>
		<findingType>LongInstantiation</findingType>
		<findingType>JUnit4TestShouldUseBeforeAnnotation</findingType>
		<findingType>JUnit4TestShouldUseAfterAnnotation</findingType>
		<findingType>JUnit4TestShouldUseTestAnnotation</findingType>
		<findingType>JUnit4SuitesShouldUseSuiteAnnotation</findingType>
		<findingType>JUnitUseExpected</findingType>
		<name>Migration Rules</name>
		<description>
			Contains rules about migrating from one JDK version to
			another. Don't use these rules directly, rather, use a
			wrapper ruleset such as migrating_to_13.xml.
		</description>
	</category>
	<category>
		<id>Naming Rules</id>
		<findingType>ShortVariable</findingType>
		<findingType>LongVariable</findingType>
		<findingType>ShortMethodName</findingType>
		<!-- DUP <findingType>VariableNamingConventions</findingType> -->
		<!-- DUP <findingType>MethodNamingConventions</findingType> -->
		<!-- DUP <findingType>ClassNamingConventions</findingType> -->
		<findingType>AbstractNaming</findingType>
		<findingType>AvoidDollarSigns</findingType>
		<findingType>MethodWithSameNameAsEnclosingClass</findingType>
		<!-- DUP <findingType>SuspiciousHashcodeMethodName</findingType> -->
		<findingType>SuspiciousConstantFieldName</findingType>
		<!-- DUP <findingType>SuspiciousEqualsMethodName</findingType> -->
		<findingType>AvoidFieldNameMatchingTypeName</findingType>
		<findingType>AvoidFieldNameMatchingMethodName</findingType>
		<findingType>NoPackage</findingType>
		<findingType>PackageCase</findingType>
		<findingType>MisleadingVariableName</findingType>
		<findingType>BooleanGetMethodName</findingType>
		<findingType>
			AvoidNonConstructorMethodsWithClassName
		</findingType>
		<name>Naming Rules</name>
		<description>
			The Naming Ruleset contains a collection of rules about
			names - too long, too short, and so forth.
		</description>
	</category>
	<category>
		<id>Optimization Rules</id>
		<findingType>LocalVariableCouldBeFinal</findingType>
		<findingType>MethodArgumentCouldBeFinal</findingType>
		<findingType>AvoidInstantiatingObjectsInLoops</findingType>
		<findingType>UseArrayListInsteadOfVector</findingType>
		<findingType>SimplifyStartsWith</findingType>
		<!--  DUP <findingType>UseStringBufferForStringAppends</findingType> -->
		<findingType>UseArraysAsList</findingType>
		<findingType>AvoidArrayLoops</findingType>
		<findingType>UnnecessaryWrapperObjectCreation</findingType>
		<findingType>AddEmptyString</findingType>
		<name>Optimization Rules</name>
		<description>
			These rules deal with different optimizations that generally
			apply to performance best practices.
		</description>
	</category>
	<category>
		<id>Strict Exception Rules</id>
		<findingType>AvoidCatchingThrowable</findingType>
		<findingType>SignatureDeclareThrowsException</findingType>
		<findingType>ExceptionAsFlowControl</findingType>
		<findingType>AvoidCatchingNPE</findingType>
		<findingType>AvoidThrowingRawExceptionTypes</findingType>
		<findingType>AvoidThrowingNullPointerException</findingType>
		<findingType>AvoidRethrowingException</findingType>
		<findingType>DoNotExtendJavaLangError</findingType>
		<findingType>DoNotThrowExceptionInFinally</findingType>
		<name>Strict Exception Rules</name>
		<description>
			These rules provide some strict guidelines about throwing
			and catching exceptions.
		</description>
	</category>
	<category>
		<id>String and StringBuffer Rules</id>
		<findingType>AvoidDuplicateLiterals</findingType>
		<findingType>StringInstantiation</findingType>
		<findingType>StringToString</findingType>
		<findingType>InefficientStringBuffering</findingType>
		<findingType>UnnecessaryCaseChange</findingType>
		<findingType>UseStringBufferLength</findingType>
		<findingType>AppendCharacterWithChar</findingType>
		<findingType>ConsecutiveLiteralAppends</findingType>
		<findingType>UseIndexOfChar</findingType>
		<findingType>InefficientEmptyStringCheck</findingType>
		<findingType>InsufficientStringBufferDeclaration</findingType>
		<findingType>UselessStringValueOf</findingType>
		<findingType>StringBufferInstantiationWithChar</findingType>
		<findingType>AvoidStringBufferField</findingType>
		<name>String and StringBuffer Rules</name>
		<description>
			These rules deal with different problems that can occur with
			manipulation of the class String or StringBuffer.
		</description>
	</category>
	<category>
		<id>Security Code Guidelines</id>
		<findingType>MethodReturnsInternalArray</findingType>
		<findingType>ArrayIsStoredDirectly</findingType>
		<name>Security Code Guidelines</name>
		<description>
			These rules check the security guidelines from Sun,
			published at
			http://java.sun.com/security/seccodeguide.html#gcg
		</description>
	</category>
	<category>
		<id>Unused Code Rules</id>
		<!-- DUP <findingType>UnusedPrivateField</findingType> -->
		<findingType>UnusedLocalVariable</findingType>
		<findingType>UnusedPrivateMethod</findingType>
		<findingType>UnusedFormalParameter</findingType>
		<name>Unused Code Rules</name>
		<description>
			The Unused Code Ruleset contains a collection of rules that
			find unused code.
		</description>
	</category>
</findingTypes>