package com.surelogic.sierra.jdbc;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Callable;

public class LazyPreparedStatementConnection implements Connection {

	private final Connection conn;

	public LazyPreparedStatementConnection(Connection conn) {
		this.conn = conn;
	}

	public void clearWarnings() throws SQLException {
		conn.clearWarnings();
	}

	public void close() throws SQLException {
		conn.close();
	}

	public void commit() throws SQLException {
		conn.commit();
	}

	public Statement createStatement() throws SQLException {
		return conn.createStatement();
	}

	public Statement createStatement(int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {
		return conn.createStatement(resultSetType, resultSetConcurrency,
				resultSetHoldability);
	}

	public Statement createStatement(int resultSetType, int resultSetConcurrency)
			throws SQLException {
		return conn.createStatement(resultSetType, resultSetConcurrency);
	}

	public boolean getAutoCommit() throws SQLException {
		return conn.getAutoCommit();
	}

	public String getCatalog() throws SQLException {
		return conn.getCatalog();
	}

	public int getHoldability() throws SQLException {
		return conn.getHoldability();
	}

	public DatabaseMetaData getMetaData() throws SQLException {
		return conn.getMetaData();
	}

	public int getTransactionIsolation() throws SQLException {
		return conn.getTransactionIsolation();
	}

	public Map<String, Class<?>> getTypeMap() throws SQLException {
		return conn.getTypeMap();
	}

	public SQLWarning getWarnings() throws SQLException {
		return conn.getWarnings();
	}

	public boolean isClosed() throws SQLException {
		return conn.isClosed();
	}

	public boolean isReadOnly() throws SQLException {
		return conn.isReadOnly();
	}

	public String nativeSQL(String sql) throws SQLException {
		return conn.nativeSQL(sql);
	}

	public CallableStatement prepareCall(String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {
		return conn.prepareCall(sql, resultSetType, resultSetConcurrency,
				resultSetHoldability);
	}

	public CallableStatement prepareCall(String sql, int resultSetType,
			int resultSetConcurrency) throws SQLException {
		return conn.prepareCall(sql, resultSetType, resultSetConcurrency);
	}

	public CallableStatement prepareCall(String sql) throws SQLException {
		return conn.prepareCall(sql);
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {
		return new LazyPreparedStatement(sql, resultSetType,
				resultSetConcurrency, resultSetHoldability);
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType,
			int resultSetConcurrency) throws SQLException {
		return new LazyPreparedStatement(sql, resultSetType,
				resultSetConcurrency);
	}

	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
			throws SQLException {
		return new LazyPreparedStatement(sql, autoGeneratedKeys);
	}

	public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
			throws SQLException {
		return new LazyPreparedStatement(sql, columnIndexes);
	}

	public PreparedStatement prepareStatement(String sql, String[] columnNames)
			throws SQLException {
		return new LazyPreparedStatement(sql, columnNames);
	}

	public PreparedStatement prepareStatement(String sql) throws SQLException {
		return new LazyPreparedStatement(sql);
	}

	public void releaseSavepoint(Savepoint savepoint) throws SQLException {
		conn.releaseSavepoint(savepoint);
	}

	public void rollback() throws SQLException {
		conn.rollback();
	}

	public void rollback(Savepoint savepoint) throws SQLException {
		conn.rollback(savepoint);
	}

	public void setAutoCommit(boolean autoCommit) throws SQLException {
		conn.setAutoCommit(autoCommit);
	}

	public void setCatalog(String catalog) throws SQLException {
		conn.setCatalog(catalog);
	}

	public void setHoldability(int holdability) throws SQLException {
		conn.setHoldability(holdability);
	}

	public void setReadOnly(boolean readOnly) throws SQLException {
		conn.setReadOnly(readOnly);
	}

	public Savepoint setSavepoint() throws SQLException {
		return conn.setSavepoint();
	}

	public Savepoint setSavepoint(String name) throws SQLException {
		return conn.setSavepoint(name);
	}

	public void setTransactionIsolation(int level) throws SQLException {
		conn.setTransactionIsolation(level);
	}

	public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
		conn.setTypeMap(map);
	}

	public static Connection wrap(Connection conn) {
		return new LazyPreparedStatementConnection(conn);
	}

	private class LazyPreparedStatement implements PreparedStatement {

		private final Callable<PreparedStatement> init;
		private PreparedStatement st;

		LazyPreparedStatement(final String sql) {
			init = new Callable<PreparedStatement>() {

				public PreparedStatement call() throws Exception {
					return conn.prepareStatement(sql);
				}

			};
		}

		LazyPreparedStatement(final String sql, final int resultSetType,
				final int resultSetConcurrency, final int resultSetHoldability) {
			init = new Callable<PreparedStatement>() {

				public PreparedStatement call() throws Exception {
					return conn.prepareStatement(sql, resultSetType,
							resultSetConcurrency, resultSetHoldability);
				}

			};
		}

		LazyPreparedStatement(final String sql, final int resultSetType,
				final int resultSetConcurrency) {
			init = new Callable<PreparedStatement>() {

				public PreparedStatement call() throws Exception {
					return conn.prepareStatement(sql, resultSetType,
							resultSetConcurrency);
				}

			};
		}

		LazyPreparedStatement(final String sql, final int autoGeneratedKeys) {
			init = new Callable<PreparedStatement>() {

				public PreparedStatement call() throws Exception {
					return conn.prepareStatement(sql, autoGeneratedKeys);
				}

			};
		}

		LazyPreparedStatement(final String sql, final int[] columnIndexes) {
			init = new Callable<PreparedStatement>() {

				public PreparedStatement call() throws Exception {
					return conn.prepareStatement(sql, columnIndexes);
				}

			};
		}

		LazyPreparedStatement(final String sql, final String[] columnNames) {
			init = new Callable<PreparedStatement>() {

				public PreparedStatement call() throws Exception {
					return conn.prepareStatement(sql, columnNames);
				}

			};
		}

		public void addBatch() throws SQLException {
			check();
			st.addBatch();
		}

		public void addBatch(String sql) throws SQLException {
			check();
			st.addBatch(sql);
		}

		public void cancel() throws SQLException {
			check();
			st.cancel();
		}

		public void clearBatch() throws SQLException {
			check();
			st.clearBatch();
		}

		public void clearParameters() throws SQLException {
			check();
			st.clearParameters();
		}

		public void clearWarnings() throws SQLException {
			check();
			st.clearWarnings();
		}

		public void close() throws SQLException {
			check();
			st.close();
		}

		public boolean execute() throws SQLException {
			check();
			return st.execute();
		}

		public boolean execute(String sql, int autoGeneratedKeys)
				throws SQLException {
			check();
			return st.execute(sql, autoGeneratedKeys);
		}

		public boolean execute(String sql, int[] columnIndexes)
				throws SQLException {
			check();
			return st.execute(sql, columnIndexes);
		}

		public boolean execute(String sql, String[] columnNames)
				throws SQLException {
			check();
			return st.execute(sql, columnNames);
		}

		public boolean execute(String sql) throws SQLException {
			check();
			return st.execute(sql);
		}

		public int[] executeBatch() throws SQLException {
			check();
			return st.executeBatch();
		}

		public ResultSet executeQuery() throws SQLException {
			check();
			return st.executeQuery();
		}

		public ResultSet executeQuery(String sql) throws SQLException {
			check();
			return st.executeQuery(sql);
		}

		public int executeUpdate() throws SQLException {
			check();
			return st.executeUpdate();
		}

		public int executeUpdate(String sql, int autoGeneratedKeys)
				throws SQLException {
			check();
			return st.executeUpdate(sql, autoGeneratedKeys);
		}

		public int executeUpdate(String sql, int[] columnIndexes)
				throws SQLException {
			check();
			return st.executeUpdate(sql, columnIndexes);
		}

		public int executeUpdate(String sql, String[] columnNames)
				throws SQLException {
			check();
			return st.executeUpdate(sql, columnNames);
		}

		public int executeUpdate(String sql) throws SQLException {
			check();
			return st.executeUpdate(sql);
		}

		public Connection getConnection() throws SQLException {
			check();
			return st.getConnection();
		}

		public int getFetchDirection() throws SQLException {
			check();
			return st.getFetchDirection();
		}

		public int getFetchSize() throws SQLException {
			check();
			return st.getFetchSize();
		}

		public ResultSet getGeneratedKeys() throws SQLException {
			check();
			return st.getGeneratedKeys();
		}

		public int getMaxFieldSize() throws SQLException {
			check();
			return st.getMaxFieldSize();
		}

		public int getMaxRows() throws SQLException {
			check();
			return st.getMaxRows();
		}

		public ResultSetMetaData getMetaData() throws SQLException {
			check();
			return st.getMetaData();
		}

		public boolean getMoreResults() throws SQLException {
			check();
			return st.getMoreResults();
		}

		public boolean getMoreResults(int current) throws SQLException {
			check();
			return st.getMoreResults(current);
		}

		public ParameterMetaData getParameterMetaData() throws SQLException {
			check();
			return st.getParameterMetaData();
		}

		public int getQueryTimeout() throws SQLException {
			check();
			return st.getQueryTimeout();
		}

		public ResultSet getResultSet() throws SQLException {
			check();
			return st.getResultSet();
		}

		public int getResultSetConcurrency() throws SQLException {
			check();
			return st.getResultSetConcurrency();
		}

		public int getResultSetHoldability() throws SQLException {
			check();
			return st.getResultSetHoldability();
		}

		public int getResultSetType() throws SQLException {
			check();
			return st.getResultSetType();
		}

		public int getUpdateCount() throws SQLException {
			check();
			return st.getUpdateCount();
		}

		public SQLWarning getWarnings() throws SQLException {
			check();
			return st.getWarnings();
		}

		public void setArray(int i, Array x) throws SQLException {
			check();
			st.setArray(i, x);
		}

		public void setAsciiStream(int parameterIndex, InputStream x, int length)
				throws SQLException {
			check();
			st.setAsciiStream(parameterIndex, x, length);
		}

		public void setBigDecimal(int parameterIndex, BigDecimal x)
				throws SQLException {
			check();
			st.setBigDecimal(parameterIndex, x);
		}

		public void setBinaryStream(int parameterIndex, InputStream x,
				int length) throws SQLException {
			check();
			st.setBinaryStream(parameterIndex, x, length);
		}

		public void setBlob(int i, Blob x) throws SQLException {
			check();
			st.setBlob(i, x);
		}

		public void setBoolean(int parameterIndex, boolean x)
				throws SQLException {
			check();
			st.setBoolean(parameterIndex, x);
		}

		public void setByte(int parameterIndex, byte x) throws SQLException {
			check();
			st.setByte(parameterIndex, x);
		}

		public void setBytes(int parameterIndex, byte[] x) throws SQLException {
			check();
			st.setBytes(parameterIndex, x);
		}

		public void setCharacterStream(int parameterIndex, Reader reader,
				int length) throws SQLException {
			check();
			st.setCharacterStream(parameterIndex, reader, length);
		}

		public void setClob(int i, Clob x) throws SQLException {
			check();
			st.setClob(i, x);
		}

		public void setCursorName(String name) throws SQLException {
			check();
			st.setCursorName(name);
		}

		public void setDate(int parameterIndex, Date x, Calendar cal)
				throws SQLException {
			check();
			st.setDate(parameterIndex, x, cal);
		}

		public void setDate(int parameterIndex, Date x) throws SQLException {
			check();
			st.setDate(parameterIndex, x);
		}

		public void setDouble(int parameterIndex, double x) throws SQLException {
			check();
			st.setDouble(parameterIndex, x);
		}

		public void setEscapeProcessing(boolean enable) throws SQLException {
			check();
			st.setEscapeProcessing(enable);
		}

		public void setFetchDirection(int direction) throws SQLException {
			check();
			st.setFetchDirection(direction);
		}

		public void setFetchSize(int rows) throws SQLException {
			check();
			st.setFetchSize(rows);
		}

		public void setFloat(int parameterIndex, float x) throws SQLException {
			check();
			st.setFloat(parameterIndex, x);
		}

		public void setInt(int parameterIndex, int x) throws SQLException {
			check();
			st.setInt(parameterIndex, x);
		}

		public void setLong(int parameterIndex, long x) throws SQLException {
			check();
			st.setLong(parameterIndex, x);
		}

		public void setMaxFieldSize(int max) throws SQLException {
			check();
			st.setMaxFieldSize(max);
		}

		public void setMaxRows(int max) throws SQLException {
			check();
			st.setMaxRows(max);
		}

		public void setNull(int paramIndex, int sqlType, String typeName)
				throws SQLException {
			check();
			st.setNull(paramIndex, sqlType, typeName);
		}

		public void setNull(int parameterIndex, int sqlType)
				throws SQLException {
			check();
			st.setNull(parameterIndex, sqlType);
		}

		public void setObject(int parameterIndex, Object x, int targetSqlType,
				int scale) throws SQLException {
			check();
			st.setObject(parameterIndex, x, targetSqlType, scale);
		}

		public void setObject(int parameterIndex, Object x, int targetSqlType)
				throws SQLException {
			check();
			st.setObject(parameterIndex, x, targetSqlType);
		}

		public void setObject(int parameterIndex, Object x) throws SQLException {
			check();
			st.setObject(parameterIndex, x);
		}

		public void setQueryTimeout(int seconds) throws SQLException {
			check();
			st.setQueryTimeout(seconds);
		}

		public void setRef(int i, Ref x) throws SQLException {
			check();
			st.setRef(i, x);
		}

		public void setShort(int parameterIndex, short x) throws SQLException {
			check();
			st.setShort(parameterIndex, x);
		}

		public void setString(int parameterIndex, String x) throws SQLException {
			check();
			st.setString(parameterIndex, x);
		}

		public void setTime(int parameterIndex, Time x, Calendar cal)
				throws SQLException {
			check();
			st.setTime(parameterIndex, x, cal);
		}

		public void setTime(int parameterIndex, Time x) throws SQLException {
			check();
			st.setTime(parameterIndex, x);
		}

		public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal)
				throws SQLException {
			check();
			st.setTimestamp(parameterIndex, x, cal);
		}

		public void setTimestamp(int parameterIndex, Timestamp x)
				throws SQLException {
			check();
			st.setTimestamp(parameterIndex, x);
		}

		@SuppressWarnings("deprecation")
		public void setUnicodeStream(int parameterIndex, InputStream x,
				int length) throws SQLException {
			check();
			st.setUnicodeStream(parameterIndex, x, length);
		}

		public void setURL(int parameterIndex, URL x) throws SQLException {
			check();
			st.setURL(parameterIndex, x);
		}

		private void check() throws SQLException {
			if (st == null) {
				try {
					st = init.call();
				} catch (Exception e) {
					if (e instanceof SQLException) {
						throw (SQLException) e;
					} else if (e instanceof RuntimeException) {
						throw (RuntimeException) e;
					}
				}
			}
		}

		public void setAsciiStream(int parameterIndex, InputStream x)
				throws SQLException {
			// TODO Auto-generated method stub

		}

		public void setAsciiStream(int parameterIndex, InputStream x,
				long length) throws SQLException {
			// TODO Auto-generated method stub

		}

		public void setBinaryStream(int parameterIndex, InputStream x)
				throws SQLException {
			// TODO Auto-generated method stub

		}

		public void setBinaryStream(int parameterIndex, InputStream x,
				long length) throws SQLException {
			// TODO Auto-generated method stub

		}

		public void setBlob(int parameterIndex, InputStream inputStream)
				throws SQLException {
			// TODO Auto-generated method stub

		}

		public void setBlob(int parameterIndex, InputStream inputStream,
				long length) throws SQLException {
			// TODO Auto-generated method stub

		}

		public void setCharacterStream(int parameterIndex, Reader reader)
				throws SQLException {
			// TODO Auto-generated method stub

		}

		public void setCharacterStream(int parameterIndex, Reader reader,
				long length) throws SQLException {
			// TODO Auto-generated method stub

		}

		public void setClob(int parameterIndex, Reader reader)
				throws SQLException {
			// TODO Auto-generated method stub

		}

		public void setClob(int parameterIndex, Reader reader, long length)
				throws SQLException {
			// TODO Auto-generated method stub

		}

		public void setNCharacterStream(int parameterIndex, Reader value)
				throws SQLException {
			// TODO Auto-generated method stub

		}

		public void setNCharacterStream(int parameterIndex, Reader value,
				long length) throws SQLException {
			// TODO Auto-generated method stub

		}

		public void setNClob(int parameterIndex, NClob value)
				throws SQLException {
			// TODO Auto-generated method stub

		}

		public void setNClob(int parameterIndex, Reader reader)
				throws SQLException {
			// TODO Auto-generated method stub

		}

		public void setNClob(int parameterIndex, Reader reader, long length)
				throws SQLException {
			// TODO Auto-generated method stub

		}

		public void setNString(int parameterIndex, String value)
				throws SQLException {
			// TODO Auto-generated method stub

		}

		public void setRowId(int parameterIndex, RowId x) throws SQLException {
			// TODO Auto-generated method stub

		}

		public void setSQLXML(int parameterIndex, SQLXML xmlObject)
				throws SQLException {
			// TODO Auto-generated method stub

		}

		public boolean isClosed() throws SQLException {
			// TODO Auto-generated method stub
			return false;
		}

		public boolean isPoolable() throws SQLException {
			// TODO Auto-generated method stub
			return false;
		}

		public void setPoolable(boolean poolable) throws SQLException {
			// TODO Auto-generated method stub

		}

		public boolean isWrapperFor(Class<?> iface) throws SQLException {
			// TODO Auto-generated method stub
			return false;
		}

		public <T> T unwrap(Class<T> iface) throws SQLException {
			// TODO Auto-generated method stub
			return null;
		}
	}

	public Array createArrayOf(String typeName, Object[] elements)
			throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Blob createBlob() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Clob createClob() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public NClob createNClob() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public SQLXML createSQLXML() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Struct createStruct(String typeName, Object[] attributes)
			throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Properties getClientInfo() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public String getClientInfo(String name) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public boolean isValid(int timeout) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	public void setClientInfo(Properties properties)
			throws SQLClientInfoException {
		// TODO Auto-generated method stub

	}

	public void setClientInfo(String name, String value)
			throws SQLClientInfoException {
		// TODO Auto-generated method stub

	}

	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	public <T> T unwrap(Class<T> iface) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}
}
