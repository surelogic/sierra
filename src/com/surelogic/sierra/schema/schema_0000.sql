CREATE TABLE SIERRA_USER (
  ID         BIGINT       NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY, 
  USER_NAME  VARCHAR(255) UNIQUE NOT NULL
);

CREATE TABLE TOOL (
  ID       BIGINT       NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  NAME     VARCHAR(255) NOT NULL,
  VERSION  VARCHAR(255) NOT NULL,
  CONSTRAINT TOOL_CN UNIQUE (NAME,VERSION)
);

CREATE TABLE PROJECT (
  ID                 BIGINT       NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY, 
  NAME               VARCHAR(255) UNIQUE NOT NULL,
  SERVER_UID         CHAR(36),
  SETTINGS_REVISION  BIGINT       NOT NULL DEFAULT 0
);

CREATE TABLE SCAN (
  ID              BIGINT          NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY, 
  USER_ID         BIGINT          CONSTRAINT SCAN_SPSUSER_FK REFERENCES SIERRA_USER(ID),
  PROJECT_ID      BIGINT          NOT NULL CONSTRAINT SCAN_PROJECT_FK REFERENCES PROJECT(ID),
  UID             CHAR(36)        UNIQUE NOT NULL,
  JAVA_VERSION    VARCHAR(32672),
  JAVA_VENDOR     VARCHAR(32672),
  SCAN_DATE_TIME  TIMESTAMP       NOT NULL,
  STATUS          VARCHAR(10)     NOT NULL CONSTRAINT SCAN_STATUS_CN CHECK (STATUS IN ('LOADING', 'FINISHED'))
);

CREATE TABLE SCAN_ERROR (
  ID       BIGINT         NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY, 
  SCAN_ID  BIGINT         NOT NULL CONSTRAINT ERROR_SCAN_FK REFERENCES SCAN(ID) ON DELETE CASCADE,
  TOOL_ID  BIGINT         NOT NULL CONSTRAINT ERROR_TOOL_FK REFERENCES TOOL(ID),
  MESSAGE  VARCHAR(32672) NOT NULL
);

CREATE TABLE FINDING (
  ID                    BIGINT    NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  PROJECT_ID            BIGINT    NOT NULL CONSTRAINT FINDING_PROJECT_FK REFERENCES PROJECT (ID),
  OBSOLETED_BY_ID       BIGINT    CONSTRAINT FINDING_OBSOLETED_FINDING_FK REFERENCES FINDING (ID),
  UID                   CHAR(36),
  IS_READ               CHAR(1)   NOT NULL DEFAULT 'N' CONSTRAINT FINDING_READ_CN CHECK (IS_READ IN ('Y','N')),
  LAST_CHANGED          TIMESTAMP,
  IMPORTANCE            INT,
  SUMMARY               VARCHAR(32672),
  OBSOLETED_BY_REVISION BIGINT
);

CREATE TABLE AUDIT (
  ID          BIGINT          NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY, 
  FINDING_ID  BIGINT          NOT NULL CONSTRAINT AUDIT_FINDING_FK REFERENCES FINDING (ID) ON DELETE CASCADE,
  EVENT       VARCHAR(10)     NOT NULL CONSTRAINT EVENT_CN CHECK (EVENT IN ('COMMENT','IMPORTANCE','READ','SUMMARY')),
  USER_ID     BIGINT          CONSTRAINT AUDIT_SPSUSER_FK REFERENCES SIERRA_USER (ID),
  DATE_TIME   TIMESTAMP       NOT NULL,
  VALUE       VARCHAR(32672),
  REVISION    BIGINT
);

CREATE INDEX AUDIT_EVENT_INDEX ON AUDIT(EVENT);

CREATE TABLE ARTIFACT_TYPE (
  ID                    BIGINT        NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  TOOL_ID               BIGINT        NOT NULL CONSTRAINT ARTIFACT_TYPE_TOOL_FK REFERENCES TOOL (ID),
  MNEMONIC              VARCHAR(255)  NOT NULL,
  MNEMONIC_DISPLAY      VARCHAR(255)  NOT NULL,
  CATEGORY              VARCHAR(32672),
  LINK                  VARCHAR(32672),
  INFO                  VARCHAR(32672),
  CONSTRAINT ARTIFACT_TYPE_CN UNIQUE (TOOL_ID, MNEMONIC)
);

CREATE TABLE COMPILATION_UNIT (
  ID            BIGINT         NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  PACKAGE_NAME  VARCHAR(32672) NOT NULL,
  CLASS_NAME    VARCHAR(32672) NOT NULL,
  CONSTRAINT COMPILATION_UNIT_CN UNIQUE (PACKAGE_NAME, CLASS_NAME)
); 

CREATE TABLE SOURCE_LOCATION (
  ID                   BIGINT         NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  COMPILATION_UNIT_ID  BIGINT         NOT NULL CONSTRAINT SOURCE_LOCATION_COMPILATION_UNIT_FK REFERENCES COMPILATION_UNIT (ID),
  HASH                 BIGINT,
  LINE_OF_CODE         INT            NOT NULL, -- no value represented by 0 instead of null
  END_LINE_OF_CODE     INT            NOT NULL, -- no value represented by 0 instead of null
  LOCATION_TYPE        VARCHAR(6)     CONSTRAINT FIELD_TYPE_CN CHECK (LOCATION_TYPE IN ('METHOD', 'CLASS', 'FIELD')),
  IDENTIFIER           VARCHAR(32672)
);
CREATE INDEX SOURCE_LOCATION_HASH_INDEX ON SOURCE_LOCATION(HASH);

CREATE TABLE METRIC_CU (
  SCAN_ID              BIGINT NOT NULL CONSTRAINT METRIC_CU_SCAN_FK REFERENCES SCAN (ID) ON DELETE CASCADE,
  COMPILATION_UNIT_ID  BIGINT NOT NULL CONSTRAINT METRIC_CU_COMPILATION_UNIT_FK REFERENCES COMPILATION_UNIT (ID),
  LINES_OF_CODE        INT,
  PRIMARY KEY (SCAN_ID,COMPILATION_UNIT_ID)
);

CREATE TABLE ARTIFACT (
  ID                          BIGINT         NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY, 
  SCAN_ID                     BIGINT         NOT NULL CONSTRAINT ARTIFACT_SCAN_FK REFERENCES SCAN (ID) ON DELETE CASCADE,
  ARTIFACT_TYPE_ID            BIGINT         NOT NULL CONSTRAINT ARTIFACT_ARTIFACT_TYPE_FK REFERENCES ARTIFACT_TYPE (ID),
  PRIMARY_SOURCE_LOCATION_ID  BIGINT         NOT NULL CONSTRAINT ARTIFACT_PRIMARY_SOURCE_LOCATION_FK REFERENCES SOURCE_LOCATION (ID),
  PRIORITY                    INT,
  SEVERITY                    INT,
  MESSAGE                     VARCHAR(32672)
);

CREATE TABLE ARTIFACT_FINDING_RELTN (
  ARTIFACT_ID  BIGINT NOT NULL CONSTRAINT AFR_ARTIFACT_FK REFERENCES ARTIFACT(ID) ON DELETE CASCADE,
  FINDING_ID   BIGINT NOT NULL CONSTRAINT AFR_FINDING_FK REFERENCES FINDING(ID) ON DELETE CASCADE,
  PRIMARY KEY (ARTIFACT_ID, FINDING_ID)
);

CREATE TABLE ARTIFACT_SOURCE_LOCATION_RELTN (
  ARTIFACT_ID        BIGINT NOT NULL CONSTRAINT ASLR_ARTIFACT_FK REFERENCES ARTIFACT(ID) ON DELETE CASCADE,
  SOURCE_LOCATION_ID BIGINT NOT NULL CONSTRAINT ASLR_SOURCE_LOCATION_FK REFERENCES SOURCE_LOCATION(ID),
  PRIMARY KEY (ARTIFACT_ID, SOURCE_LOCATION_ID)
);

CREATE TABLE FINDING_CATEGORY (
  ID          BIGINT         NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  UID         VARCHAR(32672) UNIQUE NOT NULL,
  NAME        VARCHAR(32672) UNIQUE NOT NULL,
  DESCRIPTION VARCHAR(32672)
);

CREATE TABLE FINDING_TYPE (
  ID            BIGINT         NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  UID           VARCHAR(32672) UNIQUE NOT NULL,
  NAME          VARCHAR(32627) NOT NULL,
  SHORT_MESSAGE VARCHAR(32672),
  INFO          VARCHAR(32672)
);

CREATE TABLE ARTIFACT_TYPE_FINDING_TYPE_RELTN (
  ARTIFACT_TYPE_ID BIGINT UNIQUE NOT NULL CONSTRAINT ATFTR_ARTIFACT_TYPE_FK REFERENCES ARTIFACT_TYPE (ID),
  FINDING_TYPE_ID  BIGINT NOT NULL CONSTRAINT ATFTR_FINDING_TYPE_FK REFERENCES FINDING_TYPE (ID),
  PRIMARY KEY (ARTIFACT_TYPE_ID,FINDING_TYPE_ID)
);

CREATE TABLE CATEGORY_FINDING_TYPE_RELTN (
  CATEGORY_ID     BIGINT NOT NULL CONSTRAINT CFTR_CATEGORY_FK REFERENCES FINDING_CATEGORY (ID),
  FINDING_TYPE_ID BIGINT NOT NULL CONSTRAINT CFTR_FINDING_TYPE_FK REFERENCES FINDING_TYPE (ID),
  PRIMARY KEY (CATEGORY_ID,FINDING_TYPE_ID)
);

CREATE TABLE PROJECT_FILTERS (
  PROJECT_ID      BIGINT  NOT NULL CONSTRAINT SETTINGS_PROJECT_FK REFERENCES PROJECT (ID),
  FINDING_TYPE_ID BIGINT  NOT NULL CONSTRAINT SETTINGS_FINDING_TYPE_FK REFERENCES FINDING_TYPE (ID),
  DELTA           INT,
  IMPORTANCE      INT,
  FILTERED        CHAR(1) CONSTRAINT SETTINGS_FILTERED_FK CHECK (FILTERED IS NULL OR FILTERED IN ('Y','N')),
  PRIMARY KEY (PROJECT_ID,FINDING_TYPE_ID)
);

CREATE TABLE LOCATION_MATCH (
  PROJECT_ID       BIGINT         NOT NULL CONSTRAINT MATCH_PROJECT_FK REFERENCES PROJECT (ID),
  HASH             BIGINT         NOT NULL,
  PACKAGE_NAME     VARCHAR(32672) NOT NULL,
  CLASS_NAME       VARCHAR(32672) NOT NULL,
  FINDING_TYPE_ID  BIGINT         NOT NULL CONSTRAINT MATCH_FINDING_TYPE_FK REFERENCES FINDING_TYPE (ID),
  FINDING_ID       BIGINT         NOT NULL CONSTRAINT MATCH_FINDING_FK REFERENCES FINDING (ID),
  REVISION         BIGINT,
  PRIMARY KEY (PROJECT_ID,HASH, PACKAGE_NAME, CLASS_NAME, FINDING_TYPE_ID)
);
CREATE INDEX MATCH_HASH_INDEX ON LOCATION_MATCH (HASH);
